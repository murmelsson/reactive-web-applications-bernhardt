
import scala.concurrent.duration._

import io.gatling.core.Predef._
import io.gatling.http.Predef._
import io.gatling.jdbc.Predef._

class RecordedSimulation extends Simulation {

	val httpProtocol = http
		.baseURL("http://app-14cd0ba4-7543-4c20-8167-27296e7263fd.cleverapps.io")
		.inferHtmlResources()
		.acceptHeader("text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8")
		.acceptEncodingHeader("gzip, deflate")
		.acceptLanguageHeader("en-US,en;q=0.5")
		.userAgentHeader("Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:45.0) Gecko/20100101 Firefox/45.0")

  //For some reason the uri1-variable is not generated by Gatling, which then caused the
  //gatling.sh script to cause the zinc-compiler to fail. So, I put in a sensible-looking default,
  //which seems to work just fine:
  val uri1 = "http://app-14cd0ba4-7543-4c20-8167-27296e7263fd.cleverapps.io"


	val scn = scenario("RecordedSimulation")
		.exec(http("request_0")
			.get("/"))
		.pause(1)
		.exec(http("request_1")
			.get("/compute"))
		.pause(1)
		.exec(http("request_2")
			.get("/compute")
			.resources(http("request_3")
			.get(uri1 + "/compute")))

	//setUp(scn.inject(atOnceUsers(1))).protocols(httpProtocol)
  setUp(
    scn.inject(
      nothingFor(4 seconds),
      rampUsers(50) over(10 seconds),
      atOnceUsers(10),
      constantUsersPerSec(2) during(15 seconds) randomized,
      splitUsers(50) into (
        rampUsers(10) over(10 seconds)
      ) separatedBy(5 seconds)
    ).protocols(httpProtocol)
  )
}
